
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function


import argparse
import sys

#sys.path.append('/Users/Charles/Documents/Github/tensorflow/')
#print(sys.path)
from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf 

FLAGS = None

#function declartion for main function
def main(_):

	print('begin')
	#mnist = input_data.read_data_sets
	#mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)

	mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)
	#  55,000 training data mnist.train 10,000 test data mnist.test 5,000 validation data mnist.validation 
	# mnist.train.labels has the labels 0-9 of the training data

	x = tf.placeholder(tf.float32, [None,784])

	#evidence = Sum (weights * x + b)
	#softmax(x) = normalize(exp(x))
	W = tf.Variable(tf.zeros([784, 10]))
	b = tf.Variable(tf.zeros([10]))

	#weights
	y = tf.nn.softmax(tf.matmul(x,W) + b)  # prediction
	y_ = tf.placeholder(tf.float32, [None,10]) #placeholder for actual answers

	#Training using cross-entropy model
	# H(y) = 0- sum() y' log(y) ) 
	#where y' is the true distribution and y is the predicted

	cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices = [1]))
	#reduction_indicies = [1] tells it to add the elements in the second demention of y 
	# in actual code consider using tf.nn.(sparse_)softmax_cross_entropy_with_logits instead 

	train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy) 
	# 0.5 is the learning rate 

	#below was in a tutorial but doesn't work..
	#init = tf.global_variables_initializer() # defines but does not run operation
	#sess = tf.Session() 
	#sess.run(init)
	sess = tf.InteractiveSession()
  	tf.global_variables_initializer().run()
	#sess.as_default() = tf.InteractiveSession()
	#tf.global_variables_initializer().run()

	#now we train with stochastic training
	for i in range(5000):
		batch_xs, batch_ys = mnist.train.next_batch(100) #gives a batch of a random xs and ys
		sess.run(train_step, feed_dict = {x: batch_xs, y_: batch_ys})

	#argmax(y,1) finds the highest element in each of the 2nd dimensions
	correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
	#gives us a bunch of 0,1 for when they are not and are equal
	accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
	print(sess.run(accuracy, feed_dict = {x:mnist.test.images, y_: mnist.test.labels}))

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS, unparsed = parser.parse_known_args()
  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
